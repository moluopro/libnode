--- a/deps/v8/src/trap-handler/trap-handler.h
+++ b/deps/v8/src/trap-handler/trap-handler.h
@@ -17,41 +17,4 @@
-namespace internal {
-namespace trap_handler {
-
-// X64 on Linux, Windows, MacOS, FreeBSD.
-#if V8_HOST_ARCH_X64 && V8_TARGET_ARCH_X64 &&                        \
-    ((V8_OS_LINUX && !V8_OS_ANDROID) || V8_OS_WIN || V8_OS_DARWIN || \
-     V8_OS_FREEBSD)
-#define V8_TRAP_HANDLER_SUPPORTED true
-// Arm64 (non-simulator) on Mac and Linux.
-#elif V8_TARGET_ARCH_ARM64 && V8_HOST_ARCH_ARM64 && \
-    (V8_OS_DARWIN || (V8_OS_LINUX && !V8_OS_ANDROID))
-#define V8_TRAP_HANDLER_SUPPORTED true
-// Arm64 simulator on x64 on Linux, Mac, or Windows.
-//
-// The simulator case uses some inline assembly code, which cannot be
-// compiled with MSVC, so don't enable the trap handler in that case.
-// (MSVC #defines _MSC_VER, but so does Clang when targeting Windows, hence
-// the check for __clang__.)
-#elif V8_TARGET_ARCH_ARM64 && V8_HOST_ARCH_X64 && \
-    (V8_OS_LINUX || V8_OS_DARWIN || V8_OS_WIN) && \
-    (!defined(_MSC_VER) || defined(__clang__))
-#define V8_TRAP_HANDLER_VIA_SIMULATOR
-#define V8_TRAP_HANDLER_SUPPORTED true
-// Loong64 (non-simulator) on Linux.
-#elif V8_TARGET_ARCH_LOONG64 && V8_HOST_ARCH_LOONG64 && V8_OS_LINUX
-#define V8_TRAP_HANDLER_SUPPORTED true
-// Loong64 simulator on x64 on Linux
-#elif V8_TARGET_ARCH_LOONG64 && V8_HOST_ARCH_X64 && V8_OS_LINUX
-#define V8_TRAP_HANDLER_VIA_SIMULATOR
-#define V8_TRAP_HANDLER_SUPPORTED true
-// RISCV64 (non-simulator) on Linux.
-#elif V8_TARGET_ARCH_RISCV64 && V8_HOST_ARCH_RISCV64 && V8_OS_LINUX
-#define V8_TRAP_HANDLER_SUPPORTED true
-// RISCV64 simulator on x64 on Linux
-#elif V8_TARGET_ARCH_RISCV64 && V8_HOST_ARCH_X64 && V8_OS_LINUX
-#define V8_TRAP_HANDLER_VIA_SIMULATOR
-#define V8_TRAP_HANDLER_SUPPORTED true
-// Everything else is unsupported.
-#else
-#define V8_TRAP_HANDLER_SUPPORTED false
-#endif
+namespace internal {
+namespace trap_handler {
+
+#define V8_TRAP_HANDLER_SUPPORTED false

--- a/src/util.h
+++ b/src/util.h
@@ -56,5 +56,17 @@
-#ifdef __GNUC__
-#define MUST_USE_RESULT __attribute__((warn_unused_result))
-#else
-#define MUST_USE_RESULT
-#endif
+#ifdef __GNUC__
+#define MUST_USE_RESULT __attribute__((warn_unused_result))
+#else
+#define MUST_USE_RESULT
+#endif
+
+// --- Android aligned_alloc compatibility shim ---
+#if defined(__ANDROID__) && defined(__ANDROID_API__) && (__ANDROID_API__ < 28)
+#include <malloc.h>  // for posix_memalign
+
+static inline void* aligned_alloc(size_t alignment, size_t size) {
+  void* ptr = nullptr;
+  if (posix_memalign(&ptr, alignment, size) != 0) return nullptr;
+  return ptr;
+}
+#endif
+// --- end shim ---

--- a/deps/zlib/zlib.gyp
+++ b/deps/zlib/zlib.gyp
@@ -177,1 +177,21 @@
-        }, # zlib_data_chunk_simd
+        }, # zlib_data_chunk_simd
+        {
+          'target_name': 'android_cpufeatures',
+          'type': 'static_library',
+          'conditions': [
+            ['OS=="android"', {
+              'copies': [{
+                'files': [
+                  '<(android_ndk_path)/sources/android/cpufeatures/cpu-features.c',
+                ],
+                'destination': '<(SHARED_INTERMEDIATE_DIR)/android_cpufeatures',
+              }],
+              'sources': [
+                '<(SHARED_INTERMEDIATE_DIR)/android_cpufeatures/cpu-features.c',
+              ],
+              'include_dirs': [
+                '<(SHARED_INTERMEDIATE_DIR)/android_cpufeatures',
+              ],
+            }],
+          ],
+        }, # android_cpufeatures

--- a/deps/zlib/zlib.gyp
+++ b/deps/zlib/zlib.gyp
@@ -220,4 +220,7 @@
-              'defines': [
-                'USE_FILE32API'
-              ],
-            }],
+              'defines': [
+                'USE_FILE32API'
+              ],
+            }],
+            ['OS=="android"', {
+              'dependencies': [ 'android_cpufeatures' ],
+            }],
